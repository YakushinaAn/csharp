#region Автор
//Якушина Анна
#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Text.RegularExpressions;


namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            #region Задача 1
            //Изменить программу вывода функции так, чтобы можно было передавать функции типа double (double,double). Продемонстрировать работу на функции с функцией a*x^2 и функцией a*sin(x).
            #endregion
            Console.WriteLine("Задание 1");
            Console.WriteLine("\nВызов 1");
            PrintSquare(GetSquare, 5, 10);
            Console.ReadKey();

            #region Задача 2
            //Модифицировать программу нахождения минимума функции так, чтобы можно было передавать функцию в виде делегата.
            //а) Сделайте меню с различными функциями и предоставьте пользователю выбор, для какой функции и на каком отрезке находить минимум.
            //б) Используйте массив(или список) делегатов, в котором хранятся различные функции.
            #endregion

            Console.WriteLine("\nЗадание 2");
            Console.WriteLine("\nВыберите функцию:");
            Console.WriteLine("1. x * x - 50 * x + 10");
            Console.WriteLine("2. x + x");
            var input = int.Parse(Console.ReadLine());

            Console.WriteLine("\nВыберите отрезок поиска.");
            Console.WriteLine("\nВведите начало отрезка");
            var start = int.Parse(Console.ReadLine());

            Console.WriteLine("\nВведите конец отрезка");
            var end = int.Parse(Console.ReadLine());

            Function[] F = { F1, F2 };

            SaveFunc("data.bin", start, end, 0.5, F[input-1]);
            Console.WriteLine(Load("data.bin"));

            Console.ReadKey();
        }


        public delegate double Fun(double a, double b);

        private static void PrintSquare(Fun f, double a, double b)
        {
            Console.WriteLine(f(a,b));
        }

        private static double GetSquare(double x, double y)
        {
            //return y * Math.Pow(x, 2);  // - проверка  a*x^2
            return y * Math.Sin(x); // - проверка  a*sin(x)
        }

        public delegate double Function(double x);
        public static double F1(double x)
        {
            return x * x - 50 * x + 10;
        }

        public static double F2(double x)
        {
            return x +  x ;
        }

        public static void SaveFunc(string fileName, double a, double b, double h, Function F)
        {
            FileStream fs = new FileStream(fileName, FileMode.Create, FileAccess.Write);
            BinaryWriter bw = new BinaryWriter(fs);
            double x = a;
            
            while (x <= b)
            {
                    bw.Write(F(x));
                    x += h;
            }
            bw.Close();
            fs.Close();
        }

        public static double Load(string fileName)
        {
            FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            BinaryReader bw = new BinaryReader(fs);
            double min = double.MaxValue;
            double d;
            for (int i = 0; i < fs.Length / sizeof(double); i++)
            {
                d = bw.ReadDouble();
                if (d < min) min = d;
            }
            bw.Close();
            fs.Close();
            return min;
        }
    }
}
    



